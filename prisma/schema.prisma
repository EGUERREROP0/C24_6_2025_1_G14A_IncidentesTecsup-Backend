generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model app_user {
  id                                              Int                @id @default(autoincrement())
  first_name                                      String?            @db.VarChar(100)
  last_name                                       String?            @db.VarChar(100)
  email                                           String             @unique @db.VarChar(150)
  google_id                                       String?            @db.VarChar(150)
  profile_picture                                 String?
  is_active                                       Boolean?           @default(true)
  role_id                                         Int?               @default(1)
  password                                        String?
  email_validated                                 Boolean?           @default(false)
  user_role                                       user_role?         @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  incident                                        incident[]
  incident_history                                incident_history[]
  notification_notification_receiver_idToapp_user notification[]     @relation("notification_receiver_idToapp_user")
  notification_notification_sender_idToapp_user   notification[]     @relation("notification_sender_idToapp_user")
}

model incident {
  id               Int                @id @default(autoincrement())
  title            String?            @db.VarChar(150)
  description      String?
  image_url        String?
  priority         priority_enum?
  report_date      DateTime?          @default(now()) @db.Timestamp(6)
  close_date       DateTime?          @db.Timestamp(6)
  status_id        Int?
  user_id          Int?
  type_id          Int?
  location_id      Int?
  location         location?          @relation(fields: [location_id], references: [id], onUpdate: NoAction)
  incident_status  incident_status?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  incident_type    incident_type?     @relation(fields: [type_id], references: [id], onUpdate: NoAction)
  app_user         app_user?          @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  incident_history incident_history[]
}

model incident_history {
  id              Int       @id @default(autoincrement())
  incident_id     Int?
  previous_status String?   @db.VarChar(100)
  new_status      String?   @db.VarChar(100)
  change_date     DateTime? @default(now()) @db.Timestamp(6)
  comment         String?
  modified_by     Int?
  incident        incident? @relation(fields: [incident_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user        app_user? @relation(fields: [modified_by], references: [id], onUpdate: NoAction)
}

model incident_status {
  id       Int                  @id @default(autoincrement())
  name     incident_status_enum
  incident incident[]
}

model incident_type {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(100)
  incident incident[]
}

model location {
  id        Int        @id @default(autoincrement())
  latitude  Decimal?   @db.Decimal(9, 6)
  longitude Decimal?   @db.Decimal(9, 6)
  altitude  Decimal?   @db.Decimal(9, 2)
  reference String?
  incident  incident[]
}

model notification {
  id                                          Int       @id @default(autoincrement())
  sender_id                                   Int?
  receiver_id                                 Int?
  message                                     String
  is_read                                     Boolean?  @default(false)
  created_at                                  DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime? @default(now()) @db.Timestamp(6)
  app_user_notification_receiver_idToapp_user app_user? @relation("notification_receiver_idToapp_user", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  app_user_notification_sender_idToapp_user   app_user? @relation("notification_sender_idToapp_user", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_role {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(50)
  app_user app_user[]
}

enum incident_status_enum {
  pending
  in_progress
  resolved
  closed
  reopened
}

enum priority_enum {
  low
  medium
  high
}
